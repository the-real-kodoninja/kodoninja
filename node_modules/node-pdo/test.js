const PDO = require('./');

async function main() {
    let db = new PDO();
    try {
        await db.open("odbc:Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=\\\\sqlserver2\\httpdroot\\osp.web\\db\\db.mdb");


        let problemOrders = await db.queryColumn(`
            SELECT COUNT(*)
            FROM (
                SELECT s.sequenceNumber
                FROM (status as s
                INNER JOIN [Order] as o ON o.[order sequence number] = s.sequenceNumber)
                INNER JOIN xmlTransactions as x ON x.sequenceNumber = s.sequenceNumber
                WHERE NOT s.sentSalesOrder
                AND o.nTotalItemsCancelled < o.nTotalItemsOrdered
                AND NOT o.bOrderIsDeleted
                AND NOT s.noFurtherAction
                AND x.error
                AND o.nColor = 255
                GROUP BY s.sequenceNumber
            ) as poQ
        `);
        console.log('problemOrders', problemOrders);

        let stockIssues = await db.queryColumn(`
            SELECT COUNT(*)
            FROM (status as s
            INNER JOIN [Order] as o ON o.[order sequence number] = s.sequenceNumber)
            WHERE NOT s.sentSalesOrder
            AND o.nTotalItemsCancelled + o.nTotalItemsShipped < o.nTotalItemsOrdered
            AND NOT o.bOrderIsDeleted
            AND NOT s.noFurtherAction
            AND s.orderStockStatus = 1
        `);
        console.log('stockIssues', stockIssues);

        let blackholedOrders = await db.queryColumn(`
            SELECT COUNT(*)
            FROM (status AS s
            INNER JOIN [Order] AS o ON o.[order sequence number] = s.sequencenumber)
            WHERE NOT s.invoiceImportedSage
            AND NOT o.bOrderIsDeleted
            AND o.[order number] is not null
            AND o.[nTotalItemsOrdered] > o.[nTotalItemsCancelled]
            AND IIF(o.[date ordered] is not null AND Cdate(o.[date ordered]) < DATEADD('m', -1, DATE()), 1,0)
            AND o.nColor <> 255
        `);
        console.log('blackholedOrders', blackholedOrders);

    } catch (err) {
        console.log(err);
    } finally {
        await db.close();
    }
}
main();
// main();
// main();
// main();
// main();
// main();
